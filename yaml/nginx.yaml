# 配置
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
  labels:
    app: nginx
data:
  htmldir: lishi/html/
  nginx.conf: |-
    # 头部配置
    user  nginx nginx;    #定义nginx的启动用户，不建议使用root
    worker_processes  4; #定位为cpu的内核数量，因为我的环境配置是4核，所以就写4。不过这值最多也就是8，8个以上也就没什么意义了，想继续提升性能只能参考下面一项配置
    worker_cpu_affinity 0001 0010 0100 1000; #此项配置为开启多核CPU，对你先弄提升性能有很大帮助nginx默认是不开启的,1为开启，0为关闭，因此先开启第一个倒过来写，
    # 第一位0001（关闭第四个、关闭第三个、关闭第二个、开启第一个）
    # 第二位0010（关闭第四个、关闭第三个、开启第二个、关闭第一个）
    # 第三位0100（关闭第四个、开启第三个、关闭第二个、关闭第一个）
    # 后面的依次类推，有智商的应该都可以看懂了吧？  那么如果是16核或者8核cpu，就注意为00000001、00000010、00000100，总位数与cpu核数一样。

    error_log  /var/log/nginx/error.log warn; # 这两项基本不用我说
    pid        /var/run/nginx.pid;
    # Specifies the value for maximum file descriptors that can be opened by this process.
    worker_rlimit_nofile 65535; # 这个值为nginx的worker进程打开的最大文件数，如果不配置，会读取服务器内核参数（通过ulimit -a查看），如果内核的值设置太低会让nginx报错（too many open file），但是在此设置后，就会读取自己配置的参数不去读取内核参数

    events
    {
      use epoll; #客户端线程轮询方法、内核2.6版本以上的建议使用epoll
      worker_connections 65535; #设置一个worker可以打开的最大连接数
    }
    http {
      include       mime.types;
      default_type  application/octet-stream;
      #charset  gb2312;
      server_tokens  off; #为错误页面上的nginx版本信息，建议关闭，提升安全性

      server_names_hash_bucket_size 128;
      client_header_buffer_size 32k;
      large_client_header_buffers 4 32k;
      client_max_body_size 8m; # 客户端信息大小限制

      sendfile on; # 开启sendfile（）函数，sendfile可以再磁盘和tcp socket之间互相copy数据。
      tcp_nopush     on; #告诉nginx在数据包中发送所有头文件，而不是一个一个的发

      # keepalive_timeout 15;
      keepalive_timeout 120;
      tcp_nodelay on;

      proxy_intercept_errors on;
      fastcgi_intercept_errors on;
      fastcgi_connect_timeout 1300;
      fastcgi_send_timeout 1300;
      fastcgi_read_timeout 1300;
      fastcgi_buffer_size 512k;
      fastcgi_buffers 4 512k;
      fastcgi_busy_buffers_size 512k;
      fastcgi_temp_file_write_size 512k;

      proxy_connect_timeout      20s;
      proxy_send_timeout         30s;
      proxy_read_timeout         30s;
      # gzip压缩
      gzip on; #gzip是告诉nginx采用gzip后的数据来传输文件，会大量减少我们的发数据的量
      gzip_min_length  1k;
      gzip_buffers     4 16k;
      gzip_http_version 1.0;
      gzip_comp_level 2;
      gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
      gzip_vary on;
      gzip_disable msie6;
      # limit_zone  crawler  $binary_remote_addr  10m;

      log_format  main  '$http_host $remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for" '
        '$request_time $upstream_response_time';

      #proxy_temp_path和proxy_cache_path指定的路径必须在同一分区,因为它们之间是硬链接的关系
      #proxy_temp_path /var/cache/nginx/proxy_temp_dir;
      #设置Web缓存区名称为cache_one，内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。
      #proxy_cache_path /var/cache/nginx/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;

      include /etc/nginx/conf.d/*.conf; # 
      # error_page 404 = https://www.niu.com/404/;
      # error_page   500 502 503 504 = http://service.niu.com/alien/;
    }
  ca.conf: |-
    [ req ]
    default_bits       = 4096
    distinguished_name = req_distinguished_name

    [ req_distinguished_name ]
    countryName                 = CN
    countryName_default         = CN
    stateOrProvinceName         = State or Province Name (full name)
    stateOrProvinceName_default = JiangSu
    localityName                = Locality Name (eg, city)
    localityName_default        = NanJing
    organizationName            = Organization Name (eg, company)
    organizationName_default    = Sheld
    commonName                  = ls.com
    commonName_max              = 64
    commonName_default          = Ted CA Test
# pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: www-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 4Gi
  storageClassName: local-storage
## pv
---
apiVersion: v1
kind: PersistentVolume
metadata: 
  name: www-pv
spec:  
  capacity:
    storage: 4Gi 
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete  
  storageClassName: local-storage  
  local:  
    path: /d/www
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In # NotIn
          values:
          - docker-desktop
          #- node1
          #- node2
          #- node3
# 内部端口服务
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: default
  labels:
    app: nginx
spec:
  sessionAffinity: ClientIP ## 开启了session保持
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800 ## 10800秒,3小时
  ports:
    - port: 80 # 容器端口
      targetPort: 80 # 应用端口
  selector:
    app: nginx
# nginx部署
---
apiVersion: apps/v1 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: nginx
  # namespace: default
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  #strategy:
  #  type: Recreate
  template:
    metadata:
      labels:
        app: nginx
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - docker-desktop
                #- node1
                #- node2
                #- node3
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - name: http
              containerPort: 80  ## http端口
          livenessProbe: ## 应用存活探针,如果返回失败重启应用
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30 # 初始化之后30秒再他探测
            periodSeconds: 10 # 探测间隔10秒
            timeoutSeconds: 5
          readinessProbe: ## 就绪探针,失败将从后端负载中剔除
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 30 # 初始化之后30秒再他探测
            periodSeconds: 10 # 探测间隔10秒
            timeoutSeconds: 5 # 超时5秒探测失败
          volumeMounts:
            - name: www
              mountPath: /usr/share/nginx/html
            - name: conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: vhost
              mountPath: /etc/nginx/conf.d
      volumes:
        - name: www
          #hostPath: # 指向本地文件
          #  path: /mnt/www
          persistentVolumeClaim:
            claimName: www-pvc
        - name: conf
          configMap:
            name: nginx
        - name: vhost
          hostPath: # 指向本地文件
            path: /d/k8s/etc/nginx/vhost
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: php-replacepathregex
spec:
  replacePathRegex:
    regex: ^/(.*)
    replacement: /index.html
# 入口路由
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  # namespace: default
  name: https-route
spec:
  entryPoints:
    - https
  routes:
  - match: Host(`ls.com`, `www.ls.com`, `b.ls.com`, `img.ls.com`) # 首页
    kind: Rule
    services:
    - name: nginx
      port: 80
  tls:
    certResolver: default
    domains:
      - main: "ls.com"
        sans:
          - "ls.com"
          - "www.ls.com"
          - "b.ls.com"
          - "img.ls.com"

# openssl genrsa -out cakey.pem 2048 # 生成私钥文件
# openssl req -new -x509 -key cakey.pem -out cacert.pem -days 3650  # 生成自签证书指明私钥文件，证书保存路径，有效期限等