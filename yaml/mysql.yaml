# 账号密码
apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  username: emhybWdoZw== # echo -n 'zhrmghg' | base64 生城
  password: aHVhcmVuNTQzMjE= # echo -n 'huaren54321' | base64 生城
# 优化配置
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  labels:
    app: mysql
data:
  database: lishi
  replicas: "3"
  my.cnf: |-
    [mysqld]
    port = 3306
    bind_address=0.0.0.0
    lower_case_table_names=1
    ######## 复制框架 ########
    gtid_mode=ON # 全局事务标识符打开
    enforce_gtid_consistency=ON
    master_info_repository=TABLE
    relay_log_info_repository=TABLE
    binlog_checksum=NONE
    log_slave_updates=ON
    binlog_format=ROW
    wait_timeout=6000 # 超时时间 如600秒
    max_connections=20000
    max_allowed_packet=1024M # 最大允许数据量
    #要同步的数据库
    binlog-do-db = datingcenter 
    #不需要同步的数据库
    binlog-ignore-db = mysql 
    binlog_ignore_db = information_schema 
    binlog_ignore_db = performance_schema 
    binlog_ignore_db = sys
    sync_binlog = 1
    expire_logs_days =7 #二进制日志自动删除/过期的天数。默认值为0，表示不自动删除。
    ######## 组复制设置 ########
    # server必须为每个事务收集写集合，并使用XXHASH64哈希算法将其编码为散列
    transaction_write_set_extraction=XXHASH64
    # 告知插件加入或创建组命名，UUID
    # loose-group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
    # server启动时不自启组复制,为了避免每次启动自动引导具有相同名称的第二个组,所以设置为OFF。
    loose-group_replication_start_on_boot=off
    # 启动组server，种子server，加入组应该连接这些的ip和端口；其他server要加入组得由组成员同意
    #loose-group_replication_group_seeds="mysql-0.mysql:33061,mysql-1.mysql:33061,mysql-2.mysql:33061"
    #loose-group_replication_bootstrap_group=off
    # 使用MGR的单主模式
    #loose-group_replication_single_primary_mode=on
    #loose-group_replication_enforce_update_everywhere_checks=off
    disabled_storage_engines = MyISAM,BLACKHOLE,FEDERATED,CSV,ARCHIVE
    [mysqld_safe]
    log-error=/var/log/mysqld.log
    pid-file=/var/run/mysqld/mysqld.pid
  cluster.js: |-
    var replicas = 3
    var n = 0
    while(n < replicas){
    	// dba.configureInstance('root@mysql-' + n + '.mysql:3306', {clusterAdmin:"'cluster'@'%'",clusterAdminPassword:'huaren54321',password:'huaren54321','restart': true, interactive: false}) // 配置实例集群	
    	dba.configureInstance('root@mysql-' + n + '.mysql:3306', {password:'huaren54321', interactive: false, clearReadOnly: true}) // 配置实例集群	
    	// dba.checkInstanceConfiguration('root@mysql-' + n + '.mysql:3306', {password:'huaren54321','restart': true, interactive: false})      // 校验实例配置
    	n++
    }
    shell.connect('root@mysql-0.mysql:3306', 'huaren54321') // 连接到主节点
    // 创建集群
    var cluster = dba.createCluster('MyCluster', {interactive: false, multiPrimary: true, force: true}) // 创建集群
    // cluster.describe(); // 集群信息
    // 获取集群信息
    // var cluster = dba.getCluster()    // 获取集群信息
    // cluster.status()                  // 集群状态查看
    // \sql  // 切换到sql模式
    // show global variables like 'group_replication_ip_whitelist';
    // SET GLOBAL group_replication_ip_whitelist="mysql-0.mysql,mysql-1.mysql,mysql-2.mysql";
    n = 1
    while(n < replicas){
      cluster.addInstance('root@mysql-' + n + '.mysql:3306', {password:'huaren54321'})
      n++
    }
    // dba.dropMetadataSchema()   mysqlshell 清空集群
    // cluster.dissolve({force:true});  # 解散集群
    // cluster.removeInstance("root@172.16.220.10:3346", {force:true}); //  强制删除节点
    // cluster.rejoinInstance('root@172.16.220.10:3346') // 重启节点后，需要手动加入
## 数据节点
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec: 
  selector: 
    matchLabels:
      app: mysql # 匹配 .spec.template.metadata.labels
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql # 匹配 .spec.selector.matchLabels
    spec:
      initContainers:
      - name: init-mysql
        image: mysql
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ ([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          whitelist='mysql-0.mysql'
          for((i=1;i<$(REPLICAS);i++)); do
            whitelist="${whitelist}, mysql-${i}.mysql"
          done
          cat << EOF >> /etc/mysql/conf.d/server-id.cnf
          [mysqld]
          server-id=$((100 + $ordinal))
          # 告诉插件使用IP地址，端口33061用于接收组中其他成员转入连接
          loose-group_replication_local_address="mysql-${ordinal}.mysql:33061" # 告诉插件使用IP地址，端口33061用于接收组中其他成员转入连接
          report-host=mysql-${ordinal}.mysql
          loose-group_replication_ip_whitelist="${whitelist}"
          EOF
          # Copy appropriate conf.d files from config-map to emptyDir
          if [[ $ordinal -eq 0 ]]; then
            echo "log_bin=binlog" >> /etc/mysql/conf.d/server-id.cnf  # 主库打开binlog日志
          else
            echo "# super_read_only" >> /etc/mysql/conf.d/server-id.cnf  # 打开binlog日志
          fi
          cp /mnt/config-map/my.cnf /etc/mysql/conf.d
        volumeMounts:
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      containers:
      - name: mysql
        image: mysql
        imagePullPolicy: IfNotPresent
        # command: ["mysqld_safe", "-c"]
        args: ["--default-authentication-plugin=mysql_native_password"]
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: password
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mysql
              key: database
        - name: REPLICAS
          valueFrom:
            configMapKeyRef:
              name: mysql
              key: replicas
        ports:
        - containerPort: 3306
          protocol: TCP
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe: ## 存货探针
          exec:
            command:
            - /bin/sh
            - "-c"
            - MYSQL_PWD="${MYSQL_ROOT_PASSWORD}"
            - mysql -h 127.0.0.1 -u root -e "SELECT 1"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe: ## 状态探针
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: 
              - /bin/sh
              - "-c"
              - MYSQL_PWD="${MYSQL_ROOT_PASSWORD}"
              - mysql -h 127.0.0.1 -u root -e "SELECT 1"
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
      - name: data
        hostPath: # 指向本地文件
          path: /mnt/data/mysql
## mysql-shell
---
apiVersion: v1
kind: Pod
metadata:
  name: mysql-shell
  labels:
    app: mysql
spec:
  containers:
    - name: mysqlsh
      image: registry.cn-beijing.aliyuncs.com/baoweikai/mysql-shell
      imagePullPolicy: IfNotPresent
      command:
        - /bin/sh
        - "-c"
        - --
      args: [ "while true; do sleep 30; done;" ]
      volumeMounts:
      - name: conf
        mountPath: /etc/mysql/cluster.js
        subPath: cluster.js
  volumes:
  - name: conf
    configMap:
      name: mysql
## 服务
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  #sessionAffinity: ClientIP ## 开启了session保持
  #sessionAffinityConfig:
  #  clientIP:
  #    timeoutSeconds: 10800 ## 10800秒,3小时
  type: ClusterIP
  clusterIP: None
  selector:
    app: mysql
  ports:
  - name: data
    port: 3306
    targetPort: 3306 # 应用端口
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-write
  labels:
    app: mysql
spec:
  #sessionAffinity: ClientIP ## 开启了session保持
  #sessionAffinityConfig:
  #  clientIP:
  #    timeoutSeconds: 10800 ## 10800秒,3小时
  type: ClusterIP
  clusterIP: None
  selector:
    app: mysql-write
  ports:
  - name: data
    port: 3306
    targetPort: 3306 # 应用端口
## 入口路由
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteTCP
metadata:
  namespace: default
  name: mysql-route
spec:
  entryPoints:
  - mysql
  #tls:
  #  secretName: mysql-tls
  routes:
  - match: HostSNI(`*`) # 首页
    services:
    - name: mysql
      port: 3306

## openssl 命令生成 CA 证书
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=mysql.ls.com"
## 创建secret对象来存储证书 # kubectl create secret mysql-tls 删除
# kubectl create secret tls mysql-tls --cert=tls.crt --key=tls.key


## openssl req -new -sha256 -out tls.csr -key ca.key -config ca.conf