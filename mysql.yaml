# 账号密码
apiVersion: v1
kind: Secret
metadata:
  name: mysql
type: Opaque
data:
  username: emhybWdoZw== # echo -n 'zhrmghg' | base64 生城
  password: aHVhcmVuNTQzMjE= # echo -n 'huaren54321' | base64 生城
  database: bGlzaGk=
# 优化配置
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql
  labels:
    app: mysql
data:
  master.cnf: |-
    [mysqld]
    port = 3306
    bind-address=0.0.0.0
    # mysqlx_port = 33061   # MySQL-Shell和MySQL-router支持的X协议
    lower_case_table_names=1
    # 打开binlog日志
    log-bin	
    binlog-checksum=NONE
    enforce-gtid-consistency=ON
    gtid-mode=ON # 全局事务标识符打开
    [mysqld1]
    port = 33061
    bind-address=0.0.0.0

    disabled_storage_engines="MyISAM,BLACKHOLE,FEDERATED,ARCHIVE,MEMORY"
  slave.cnf: |-
    [mysqld]
    port = 3306
    bind-address=0.0.0.0
    # mysqlx_port = 33061   # MySQL-Shell和MySQL-router支持的X协议
    lower_case_table_names=1
    binlog-checksum=NONE
    enforce-gtid-consistency=ON
    gtid-mode=ON
    # super_read_only
    [mysqldc] # cluster使用
    port = 33061
    bind-address=0.0.0.0
  cluster.js: |-
    var replicas = 3
    var n = 0
    while(n < replicas){
    	// dba.configureInstance('root@mysql-' + n + '.mysql:3306', {clusterAdmin:"'cluster'@'%'",clusterAdminPassword:'huaren54321',password:'huaren54321','restart': true, interactive: false}) // 配置实例集群	
    	dba.configureInstance('root@mysql-0.mysql:3306', {password:'huaren54321', interactive: false, clearReadOnly: true}) // 配置实例集群	
    	// dba.checkInstanceConfiguration('root@mysql-' + n + '.mysql:3306', {password:'huaren54321','restart': true, interactive: false})      // 校验实例配置
    	n++
    }
    shell.connect('root@mysql-0.mysql:3306', 'huaren54321') // 连接到主节点
    // 创建集群
    var cluster = dba.createCluster('MyCluster', {interactive: false}) // 创建集群
    // cluster.describe(); // 集群信息
    // 获取集群信息
    // var cluster = dba.getCluster()    // 获取集群信息
    // cluster.status()                  // 集群状态查看
    n = 1
    while(n < replicas){
      cluster.addInstance('root@mysql-' + n + '.mysql:3306', {password:'huaren54321'})
      n++
    }
## 数据节点
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec: 
  selector: 
    matchLabels: 
      app: mysql # 匹配 .spec.template.metadata.labels
  serviceName: mysql
  replicas: 3
  template: 
    metadata:
      labels:
        app: mysql # 匹配 .spec.selector.matchLabels
    spec:
      initContainers:
      - name: init-mysql
        image: mysql
        imagePullPolicy: IfNotPresent
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ `hostname` =~ ([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          cat << EOF >> /etc/mysql/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          [mysqld]
          server-id=$((100 + $ordinal))
          report-host=mysql-${ordinal}.mysql
          # group_replication_local_address= "[2001:db8:85a3:8d3:1319:8a2e:370:7348]:33061"
          EOF
          # Copy appropriate conf.d files from config-map to emptyDir
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/master.cnf /etc/mysql/conf.d
          else
            cp /mnt/config-map/slave.cnf /etc/mysql/conf.d
          fi
        volumeMounts:
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      containers:
      - name: mysql
        image: mysql
        imagePullPolicy: IfNotPresent
        # command: ["/bin/sh", "-c", "mysqld_safe"]
        args: ["--default-authentication-plugin=mysql_native_password"]
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: password
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: mysql
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql
              key: password
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: mysql
              key: database
        ports:
        - containerPort: 3306
          protocol: TCP
        - containerPort: 33061 # 组复制端口mysql-shell
          protocol: TCP
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe: ## 存货探针
          exec:
            command:
            - /bin/sh
            - "-c"
            - MYSQL_PWD="${MYSQL_ROOT_PASSWORD}"
            - mysql -h 127.0.0.1 -u root -e "SELECT 1"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe: ## 状态探针
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: 
              - /bin/sh
              - "-c"
              - MYSQL_PWD="${MYSQL_ROOT_PASSWORD}"
              - mysql -h 127.0.0.1 -u root -e "SELECT 1"
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
      - name: data
        hostPath: # 指向本地文件
          path: /mnt/data/mysql
## mysql-shell
---
apiVersion: v1
kind: Pod
metadata:
  name: mysql-shell
  labels:
    app: mysql
spec:
  containers:
    - name: mysqlsh
      image: registry.cn-beijing.aliyuncs.com/baoweikai/mysql-shell
      imagePullPolicy: IfNotPresent
      command:
        - /bin/sh
        - "-c"
        - --
      args: [ "while true; do sleep 30; done;" ]
      volumeMounts:
      - name: conf
        mountPath: /etc/mysql/cluster.js
        subPath: cluster.js
  volumes:
  - name: conf
    configMap:
      name: mysql
## 服务
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  #sessionAffinity: ClientIP ## 开启了session保持
  #sessionAffinityConfig:
  #  clientIP:
  #    timeoutSeconds: 10800 ## 10800秒,3小时
  type: ClusterIP
  clusterIP: None
  selector:
    app: mysql
  ports:
  - name: data
    port: 3306
    targetPort: 3306 # 应用端口
  - name: cluster
    port: 33061
    targetPort: 33061 # 组复制端口
## 入口路由
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRouteTCP
metadata:
  namespace: default
  name: mysql-route
spec:
  entryPoints:
  - mysql
  #tls:
  #  secretName: mysql-tls
  routes:
  - match: HostSNI(`*`) # 首页
    services:
    - name: mysql
      port: 3306
## openssl 命令生成 CA 证书
# openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=mysql.ls.com"
## 创建secret对象来存储证书 # kubectl create secret mysql-tls 删除
# kubectl create secret tls mysql-tls --cert=tls.crt --key=tls.key


## openssl req -new -sha256 -out tls.csr -key ca.key -config ca.conf